---
title: "tutoring"
format: html
execute:
  engine: knitr
---

```{r setup, include=FALSE}
knitr::knit_engines$set(
  wolfram = function(options) {
    # Combine the code lines into a single string
    code <- paste(options$code, collapse = "\n")
    
    # Write the code to a temporary file
    tf <- tempfile(fileext = ".wl")
    writeLines(code, con = tf)
    
    # Construct and run the command (adjust the command path if needed)
    cmd <- sprintf("wolframscript -file %s", tf)
    result <- system(cmd, intern = TRUE)
    
    # Output the result to the document
    paste(result, collapse = "\n")
  }
)
```

asdfsad 
# Economics with Mathematica 

## Labor Market Dynamics

```{python}

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp


### Linear Supply and Demand Equilibrium

# Define parameters

a = 1.0      # Base labor supply intercept
b = 0.5      # Sensitivity of supply to wage
c = 10.0     # Base labor demand intercept
d = 0.4      # Sensitivity of demand to wage
k = 0.1      # Speed of wage adjustment


# Compute equilibrium wage
equilibriumW = (c - a) / (b + d)
equilibriumW

# Define the derivative function for wage dynamics
def wage_dynamics(t, W):
    return k * ((c - d * W) - (a + b * W))

# Time span and initial condition
t_span = (0, 50)
W0 = [0.5 * equilibriumW]  # starting below equilibrium
W0

# Solve the differential equation
sol = solve_ivp(wage_dynamics, t_span, W0, dense_output=True)

# Generate time points for plotting
t = np.linspace(t_span[0], t_span[1], 400)
W = sol.sol(t)[0]
```

```{r}

library(tidyverse, quietly=TRUE)

head(cars)
```

```{wolfram}

a = .5


Plot[x^a*y^(1-a), ]

```