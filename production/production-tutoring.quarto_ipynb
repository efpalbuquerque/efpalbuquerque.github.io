{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"tutoring\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "asdfsad \n",
        "# Economics with Mathematica \n",
        "\n",
        "## Labor Market Dynamics\n"
      ],
      "id": "4450943f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import solve_ivp\n",
        "\n",
        "### Linear Supply and Demand Equilibrium\n",
        "\n",
        "# Define parameters\n",
        "\n",
        "a = 1.0      # Base labor supply intercept\n",
        "b = 0.5      # Sensitivity of supply to wage\n",
        "c = 10.0     # Base labor demand intercept\n",
        "d = 0.4      # Sensitivity of demand to wage\n",
        "k = 0.1      # Speed of wage adjustment\n",
        "\n",
        "\n",
        "# Compute equilibrium wage\n",
        "equilibriumW = (c - a) / (b + d)\n",
        "equilibriumW\n",
        "\n",
        "# Define the derivative function for wage dynamics\n",
        "def wage_dynamics(t, W):\n",
        "    return k * ((c - d * W) - (a + b * W))\n",
        "\n",
        "# Time span and initial condition\n",
        "t_span = (0, 50)\n",
        "W0 = [0.5 * equilibriumW]  # starting below equilibrium\n",
        "W0\n",
        "\n",
        "# Solve the differential equation\n",
        "sol = solve_ivp(wage_dynamics, t_span, W0, dense_output=True)\n",
        "\n",
        "# Generate time points for plotting\n",
        "t = np.linspace(t_span[0], t_span[1], 400)\n",
        "W = sol.sol(t)[0]\n",
        "\n",
        "# Plotting the wage dynamics\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(t, W, label='Wage W(t)')\n",
        "plt.axhline(equilibriumW, color='red', linestyle='--', label='Equilibrium Wage')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Wage')\n",
        "plt.title('Wage Dynamics Over Time')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "### Unemployment\n",
        "\n",
        "# Define parameters for unemployment dynamics\n",
        "delta = 0.05   # Job separation rate\n",
        "mu = 0.1       # Job finding rate\n",
        "\n",
        "# Calculate steady-state unemployment rate\n",
        "equilibriumU = delta / (delta + mu)\n",
        "\n",
        "# Define the derivative function for unemployment dynamics\n",
        "def unemployment_dynamics(t, U):\n",
        "    return delta * (1 - U) - mu * U\n",
        "\n",
        "# Time span and initial condition\n",
        "t_span2 = (0, 100)\n",
        "U0 = [0.2]  # initial unemployment rate\n",
        "\n",
        "# Solve the differential equation for unemployment dynamics\n",
        "sol2 = solve_ivp(unemployment_dynamics, t_span2, U0, dense_output=True)\n",
        "\n",
        "# Generate time points for plotting\n",
        "t2 = np.linspace(t_span2[0], t_span2[1], 400)\n",
        "U = sol2.sol(t2)[0]\n",
        "\n",
        "# Plotting the unemployment dynamics\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(t2, U, label='Unemployment Rate U(t)')\n",
        "plt.axhline(equilibriumU, color='red', linestyle='--', label='Steady-State U')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Unemployment Rate')\n",
        "plt.title('Unemployment Dynamics Over Time')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "##### Alternative Plots\n",
        "\n",
        "\n",
        "# similar to ggplot2\n",
        "import pandas as pd\n",
        "from plotnine import ggplot, aes, geom_line, geom_hline, labs, theme_minimal\n",
        "\n",
        "# Create a DataFrame from your simulation data\n",
        "data = pd.DataFrame({'Time': t, 'Wage': W})\n",
        "\n",
        "# Create the ggplot-like plot\n",
        "plot = (ggplot(data, aes(x='Time', y='Wage'))\n",
        "        + geom_line(color='blue')\n",
        "        + geom_hline(yintercept=equilibriumW, linetype='dashed', color='red')\n",
        "        + labs(title='Wage Dynamics Over Time', x='Time', y='Wage')\n",
        "        + theme_minimal()\n",
        "       )\n",
        "\n",
        "# To display the plot (if you're in a Jupyter Notebook, simply type `plot`)\n",
        "print(plot)\n",
        "\n",
        "\n",
        "# Interactive\n",
        "\n",
        "import ipywidgets as widgets\n",
        "from ipywidgets import interact\n",
        "\n",
        "def interactive_wage_dynamics(W0_factor=0.5, k_value=0.1):\n",
        "    # Update parameters\n",
        "    W0_initial = [W0_factor * equilibriumW]\n",
        "    \n",
        "    def wage_dynamics_interactive(t, W):\n",
        "        return k_value * ((c - d * W) - (a + b * W))\n",
        "    \n",
        "    sol_int = solve_ivp(wage_dynamics_interactive, t_span, W0_initial, dense_output=True)\n",
        "    t_int = np.linspace(t_span[0], t_span[1], 400)\n",
        "    W_int = sol_int.sol(t_int)[0]\n",
        "    \n",
        "    plt.figure(figsize=(8, 5))\n",
        "    plt.plot(t_int, W_int, label='Wage W(t)')\n",
        "    plt.axhline(equilibriumW, color='red', linestyle='--', label='Equilibrium Wage')\n",
        "    plt.xlabel('Time')\n",
        "    plt.ylabel('Wage')\n",
        "    plt.title(f'Interactive Wage Dynamics: W0_factor={W0_factor}, k={k_value}')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "interact(interactive_wage_dynamics, W0_factor=widgets.FloatSlider(min=0.1, max=1.5, step=0.1, value=0.5),\n",
        "         k_value=widgets.FloatSlider(min=0.01, max=0.5, step=0.01, value=0.1))"
      ],
      "id": "e7a13d60",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3",
      "path": "C:\\Users\\efpal\\Anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}